# Approach 2 - Import blocks from a blockchain binary - Manually
Run:
localgeth --metrics --datadir tmp/eth1 --networkid 1999 import ethereumMainnetBlockchain-2016-05-30.binary

When it reaches one segment before the desired amount, control-C it.

In the console get the stats:

eth.blockNumber
debug.metrics(true).eth.db.chaindata.user.readscount
debug.metrics(true).eth.db.chaindata.user.reads
debug.metrics(true).eth.db.chaindata.user.writescount
debug.metrics(true).eth.db.chaindata.user.writes

localgeth --metrics --datadir tmp/eth1 --networkid 1999 console

To reset the experiment do:
rm -rf tmp/eth1
localgeth removedb



# Approach 2 - Import blocks from a blockchain binary
localgeth import data/ethereumMainnetBlockchain-2016-05-30.binary  --datadir /Users/evankaminsky/Desktop/Ethereum/go-ethereum/eth-pebbles/tmp/importnet1

localgeth --datadir tmp/testnet1 --metrics console



# Approach 1 - Setup local network with one transaction net and two mining nets
localgeth --datadir tmp/testnet1 account new -> Non-Miner, Put account hash in genesis block
localgeth --datadir tmp/testnet1 account new
localgeth --datadir tmp/testnet2 account new -> Miner 1
localgeth --datadir tmp/testnet3 account new -> Miner 2
localgeth --datadir tmp/testnet1 --networkid 1999 init BaselineGenesis.json
localgeth --datadir tmp/testnet2 --networkid 1999 init BaselineGenesis.json
localgeth --datadir tmp/testnet3 --networkid 1999 init BaselineGenesis.json
localgeth --datadir tmp/testnet1 --networkid 1999 --port 35555 --ipcdisable --rpcport 8101 --maxpeers 3 --metrics console
localgeth --datadir tmp/testnet2 --networkid 1999 --port 35556 --ipcdisable --rpcport 8102 --maxpeers 3 --metrics console
localgeth --datadir tmp/testnet3 --networkid 1999 --port 35557 --ipcdisable --rpcport 8103 --maxpeers 3 --metrics console
admin.nodeInfo.enode        -> In node 1, save result
admin.addPeer(...)          -> In miner node 1, use result from previous
admin.addPeer(...)          -> In miner node 2, use result from previous previous
admin.peers                 -> Check that they're connected
Do transactions on node 1
miner.start(1)              -> Start miner on node 2
miner.start(1)              -> Start miner on node 3

# Links & Resources
https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster
https://gist.github.com/giladoved/d753d66cb5caca118a0cab59aa4b265f

https://ethereum.stackexchange.com/questions/13547/how-to-set-up-a-private-network-and-connect-peers-in-geth
http://iotbl.blogspot.in/2017/03/setting-up-private-ethereum-testnet.html

https://github.com/ethereum/go-ethereum/issues/2769


# Individual Components #

# Setup
localgeth --datadir tmp/testnet1 account new
localgeth --datadir tmp/testnet1 --networkid 1999 init BaselineGenesis.json
localgeth --datadir tmp/testnet1 --networkid 1999 --port 35555 --ipcdisable --rpcport 8101 --maxpeers 2 -metrics console

# Test Transactions
localgeth --datadir tmp/testnet1 --networkid 1999  --port 35555 --metrics --exec 'loadScript("tmp/test-script.js")' attach tmp/testnet1/geth.ipc

# Debug Keys
debug.metrics(true).eth.db.chaindata.user.readscount

# Adding Peers
localgeth --datadir tmp/testnet2 --networkid 1999 init BaselineGenesis.json
localgeth --datadir tmp/testnet2 --networkid 1999 --port 35556 --ipcdisable --rpcport 8102 --maxpeers 2 --metrics console
Other parameters: --nodiscover --maxpeers 1 --rpccorsdomain "*" --rpc     
admin.nodeInfo.enode
admin.addPeer(...)


# Commands #

eth.pendingTransactions
eth.accounts
admin.peers
net.listening
miner.start(1)
